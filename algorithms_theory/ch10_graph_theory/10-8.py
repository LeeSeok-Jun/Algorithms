"""
도시 분할 계획
- 어떤 마을은 N개의 집과 집들을 연결하는 M개의 길로 이루어져 있다.
- 길은 양방향으로 다닐 수 있으며 유지비가 존재한다.
- 마을의 이장은 마을을 2개의 분리된 마을로 분할할 계획을 세우고 있다.
- 각 분리된 마을 안에 집들이 서로 연결되도록 분할해야 한다.
    * 각 분리된 마을 안에 있는 임의의 두 집 사이에 경로가 항상 존재해야 한다.
    * 마을에는 집이 하나 이상 있어야 한다.
- 마을의 이장은 마을 안의 길이 너무 많다는 생각에 다음과 같은 규칙을 세웠다.
    1. 분리된 두 마을 사이에 있는 길을은 필요가 없으므로 없앨 수 있다.
    2. 각 분리된 마을 안에서도 임의의 두 집 사이에 경로가 항상 존재하게 하면서 길을 더 없앨 수 있다.
    3. 위 조건을 모두 만족하면서 길의 유지비의 합을 최소로 하고 싶다.
- 위 조건을 만족시키는 프로그램을 작성하시오.

입력 조건
- 첫째 줄에 집의 개수 N, 길의 개수 M이 주어진다. N은 2 이상 100,000 이하인 정수이고 M은 1 이상 1,000,000 이하인 정수이다.
- 그다음 줄부터 M줄에 걸쳐 길의 정보가 A, B, C 3개의 정수로 공백으로 구분되어 주어지는데,
  A번 집과 B번 집을 연결하는 길의 유지비가 C(1 <= C <= 1,000)이라는 뜻이다.

출력 조건
- 첫째 줄에 길을 없애고 남은 유지비 합의 최솟값을 출력한다.
"""
# Tip. 최소 신장 트리를 구성하는 간선 중에서 가장 비용이 큰 간선을 제거한다!(크루스칼 알고리즘 이용)

# 특정 원소가 속한 집합을 찾기
def find_parent(parent, x):
    # 루트 노드가 아니라면 루트 노드를 찾을 때 까지 재귀적으로 호출
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

# 두 원소가 속한 집합을 합치기
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

# 노드의 개수와 간선의 개수 입력받기
v, e = map(int, input().split())
parent = [0] * (v + 1) # 부모 테이블 초기화

# 모든 간선을 담을 리스트와 최종 비용을 담을 변수
edges = []
result = 0

# 부모 테이블 상에서 부모를 먼저 자기 자신으로 초기화
for i in range(1, v + 1):
    parent[i] = i

# 모든 간선에 대한 정보를 입력받기
for _ in range(e):
    a, b, cost = map(int, input().split())
    # 비용 순으로 정렬하기 위해 튜플의 첫 번째 원소를 비용으로 설정
    edges.append((cost, a, b))

# 간선을 비용순으로 정렬
edges.sort()
last = 0 # 최소 신장 트리에 포함되는 간선 중에 가장 비용이 큰 간선 저장

# 크루스칼 알고리즘 수행
# 간선을 하나씩 확인하며 진행
for edge in edges:
    cost, a, b = edge
    # 특정 간선에 대해 사이클이 발생하지 않는 경우 집합에 포함
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent, a, b)
        result += cost
        last = cost # 비용이 오름차순으로 정렬되어 있기 때문에 마지막 반복에서는 비용이 가장 큰 간선의 값을 저장함

print(result - last)