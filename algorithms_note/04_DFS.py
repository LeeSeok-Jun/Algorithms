"""
DFS(깊이 우선 탐색 알고리즘)
- 그래프 전체를 탐색하는 방법 중 시작점으로 부터 다음 분기로 넘어가기 전 해당 분기를 완벽하게 탐색하고 넘어가는 방법
- '스택' 자료구조를 이용하며 스택에 들어간 노드의 순서가 곧 탐색 순서
- 데이터의 개수가 N인 경우 총 O(N)의 시간 소요
- 알고리즘 진행 과정
    1. 탐색 시작 노드를 스택에 삽입 후 방문 처리
    2. 스택의 최상단 노드와 인접한 노드 중 방문한 적 없는 노드를 스택에 삽입 후 방문 처리,
       인접 노드 중 더 이상 방문하지 않는 노드가 없다면 스택에서 최상단 노드를 추출
    3. 2의 과정을 반복
- 일반적으로 재귀적인 방법을 통해 구현
"""

def dfs(graph, v, visited):
    visited[v] = True # 방문 처리
    print(v, end=' ') # 탐색 순서 확인

    # 스택에 추가된 노드의 인접 노드를 검사
    for i in graph[v]:
        # 방문한 적 없던 노드에 대해서 재귀적으로 dfs 실행
        if not visited[i]:
            dfs(graph, i, visited)

# 그래프를 인접 리스트 방식으로 표현
graph = [
    [],             # 0번 노드 -> 존재 X
    [2, 3, 8],      # 1번 노드 -> 2번, 3번, 8번과 연결
    [1, 7],         # 이하 생략
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

visited = [False] * 9 # default = False, 방문 시 = True

dfs(graph, 1, visited)
