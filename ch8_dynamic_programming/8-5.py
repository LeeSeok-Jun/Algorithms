"""
1로 만들기
- 정수 X가 주어질 때 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지이다.
    1. X가 5로 나누어 떨어지면, 5로 나눈다.
    2. X가 3으로 나누어 떨어지면, 3으로 나는다.
    3. X가 2로 나누어 떨어지면, 2로 나눈다.
    4. X에서 1을 뺀다.
- 정수 X가 주어졌을 때, 연산 4개를 적절하게 사용해서 1을 만드려고 한다.
- 연산을 사용하는 횟수의 최솟값을 출력하시오.

입력 조건
- 첫째 줄에 정수 X가 주어진다.(1 <= X <= 30,000)

출력 조건
- 철째 줄에 연산을 하는 횟수의 최솟값을 출력한다.
"""

# 점화식
# a[i] = min(a[i-1], a[i // 2], a[i // 3], a[i // 5]) + 1
# i에 대한 연산의 최솟값은 '4가지 연산을 실행했을 때의 값들의 연산 횟수의 최솟값' 중 한번 더 연산을 수행한 결과(+1)를 반영한 값이다.


# 정수 X를 입력받기
x = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP(Dynamic Programming) 테이블 초기화
d = [0] * 30001

# 보텀업 방식으로 다이나믹 프로그래밍 진행
for i in range(2, x+1): # 2부터 x까지
    # 4가지의 연산 중 가장 작은 값을 선택하여 그 값에서 1을 추가한 값이 곧 d[i]이다.

    # 현재의 수에서 1을 빼는 경우
    # 1을 더하는 이유는 d[i]는 d[i-1] 보다 연산 횟수가 1회 많기 때문이다.
    d[i] = d[i - 1] + 1
    # 현재의 수에서 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        d[i] = min(d[i], d[i // 2] + 1)
    # 현재의 수가 3으로 나누어 떨어지는 경우
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)
    # 현재의 수가 5로 나누어 떨어지는 경우
    if i % 5 == 0:
        d[i] = min(d[i], d[i // 5] + 1)

print(d[x])